using NanoEcs; 
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class ColorComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public ColorComponent Color
	{
        get
        {
            if (!Has(GameComponentsMap.Color))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<ColorComponent>(GameComponentsMap.Color);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddColor (UnityEngine.Color value)
	{
		var c = Add<ColorComponent>(GameComponentsMap.Color);
		c.Value = value;
		return this;
	}
	
	public GameEntity SafelyAddColor (UnityEngine.Color value)
	{
		ColorComponent c;
        if (HasColor)
        {
            c = Color;
        } else
        {
            c = Add<ColorComponent>(GameComponentsMap.Color);
        }
        c.Value = value;
        return this;
	}
	
	public GameEntity RemoveColor ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.Color);
		return this;
	}
	
	public bool HasColor 
	{
			get 
			{
				return Has(GameComponentsMap.Color);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup Color
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.Color);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup Color
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.Color);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup Color
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.Color);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class MessageComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public MessageComponent Message
	{
        get
        {
            if (!Has(GameComponentsMap.Message))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<MessageComponent>(GameComponentsMap.Message);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddMessage (string value)
	{
		var c = Add<MessageComponent>(GameComponentsMap.Message);
		c.Value = value;
		return this;
	}
	
	public GameEntity SafelyAddMessage (string value)
	{
		MessageComponent c;
        if (HasMessage)
        {
            c = Message;
        } else
        {
            c = Add<MessageComponent>(GameComponentsMap.Message);
        }
        c.Value = value;
        return this;
	}
	
	public GameEntity RemoveMessage ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.Message);
		return this;
	}
	
	public bool HasMessage 
	{
			get 
			{
				return Has(GameComponentsMap.Message);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup Message
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.Message);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup Message
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.Message);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup Message
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.Message);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class NameComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public NameComponent Name
	{
        get
        {
            if (!Has(GameComponentsMap.Name))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<NameComponent>(GameComponentsMap.Name);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddName (string value)
	{
		var c = Add<NameComponent>(GameComponentsMap.Name);
		c.Value = value;
		return this;
	}
	
	public GameEntity SafelyAddName (string value)
	{
		NameComponent c;
        if (HasName)
        {
            c = Name;
        } else
        {
            c = Add<NameComponent>(GameComponentsMap.Name);
        }
        c.Value = value;
        return this;
	}
	
	public GameEntity RemoveName ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.Name);
		return this;
	}
	
	public bool HasName 
	{
			get 
			{
				return Has(GameComponentsMap.Name);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup Name
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.Name);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup Name
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.Name);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup Name
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.Name);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class PositionComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public PositionComponent Position
	{
        get
        {
            if (!Has(GameComponentsMap.Position))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<PositionComponent>(GameComponentsMap.Position);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddPosition (float x, float y)
	{
		var c = Add<PositionComponent>(GameComponentsMap.Position);
		c.X = x;
        c.Y = y;
		return this;
	}
	
	public GameEntity SafelyAddPosition (float x, float y)
	{
		PositionComponent c;
        if (HasPosition)
        {
            c = Position;
        } else
        {
            c = Add<PositionComponent>(GameComponentsMap.Position);
        }
        c.X = x;
        c.Y = y;
        return this;
	}
	
	public GameEntity RemovePosition ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.Position);
		return this;
	}
	
	public bool HasPosition 
	{
			get 
			{
				return Has(GameComponentsMap.Position);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup Position
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.Position);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup Position
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.Position);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup Position
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.Position);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class ReferenceComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public ReferenceComponent Reference
	{
        get
        {
            if (!Has(GameComponentsMap.Reference))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<ReferenceComponent>(GameComponentsMap.Reference);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddReference (GameEntity value)
	{
		var c = Add<ReferenceComponent>(GameComponentsMap.Reference);
		c.Value = value;
		return this;
	}
	
	public GameEntity SafelyAddReference (GameEntity value)
	{
		ReferenceComponent c;
        if (HasReference)
        {
            c = Reference;
        } else
        {
            c = Add<ReferenceComponent>(GameComponentsMap.Reference);
        }
        c.Value = value;
        return this;
	}
	
	public GameEntity RemoveReference ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.Reference);
		return this;
	}
	
	public bool HasReference 
	{
			get 
			{
				return Has(GameComponentsMap.Reference);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup Reference
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.Reference);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup Reference
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.Reference);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup Reference
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.Reference);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class ReferencesComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public ReferencesComponent References
	{
        get
        {
            if (!Has(GameComponentsMap.References))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<ReferencesComponent>(GameComponentsMap.References);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddReferences (NanoList<GameEntity> list)
	{
		var c = Add<ReferencesComponent>(GameComponentsMap.References);
		c.List = list;
		
c.List.Initialize(c._InternalOnValueChange, 0);
if (c.List.Count > 0) { c._InternalOnValueChange(0); }
return this;
	}
	
	public GameEntity SafelyAddReferences (NanoList<GameEntity> list)
	{
		ReferencesComponent c;
        if (HasReferences)
        {
            c = References;
        } else
        {
            c = Add<ReferencesComponent>(GameComponentsMap.References);
        }
        c.List = list;
        return this;
	}
	
	public GameEntity RemoveReferences ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.References);
		return this;
	}
	
	public bool HasReferences 
	{
			get 
			{
				return Has(GameComponentsMap.References);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup References
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.References);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup References
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.References);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup References
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.References);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class SpeedComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public SpeedComponent Speed
	{
        get
        {
            if (!Has(GameComponentsMap.Speed))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<SpeedComponent>(GameComponentsMap.Speed);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddSpeed (float value)
	{
		var c = Add<SpeedComponent>(GameComponentsMap.Speed);
		c.Value = value;
		return this;
	}
	
	public GameEntity SafelyAddSpeed (float value)
	{
		SpeedComponent c;
        if (HasSpeed)
        {
            c = Speed;
        } else
        {
            c = Add<SpeedComponent>(GameComponentsMap.Speed);
        }
        c.Value = value;
        return this;
	}
	
	public GameEntity RemoveSpeed ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.Speed);
		return this;
	}
	
	public bool HasSpeed 
	{
			get 
			{
				return Has(GameComponentsMap.Speed);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup Speed
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.Speed);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup Speed
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.Speed);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup Speed
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.Speed);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class BusinessIdComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public bool IsBusinessId 
	{
	get
        {
            return Has(GameComponentsMap.BusinessId);
        }
        set
        {
            if (value)
            {
                Add<BusinessIdComponent>(GameComponentsMap.BusinessId);
            } else
            {
                RemoveComponentOfIndex(GameComponentsMap.BusinessId);
            }
        }
	}
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup BusinessId
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.BusinessId);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup BusinessId
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.BusinessId);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup BusinessId
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.BusinessId);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class SettingsComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public bool IsSettings 
	{
	get
        {
            return Has(GameComponentsMap.Settings);
        }
        set
        {
            if (value)
            {
                Add<SettingsComponent>(GameComponentsMap.Settings);
            } else
            {
                RemoveComponentOfIndex(GameComponentsMap.Settings);
            }
        }
	}
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup Settings
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.Settings);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup Settings
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.Settings);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup Settings
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.Settings);
            return group as GameGroup;
        }
    }
}
public partial class GameWithBuilder : WithBuilder<GameEntity>
{
    public GameWithBuilder (Group<GameEntity> group) : base(group)
    {
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{
    public GameWithoutBuilder (Group<GameEntity> group) : base(group)
    {
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameAnyofBuilder (Group<GameEntity> group) : base(group)
    {
    }
}

public partial class GameGroup : Group<GameEntity>
{
	public GameGroup()
	{
	    withBuilder = new GameWithBuilder(this);
        withoutBuilder = new GameWithoutBuilder(this);
        anyofBuilder = new GameAnyofBuilder(this);
	}
	
	public GameCollector OnAdd
    {
        get
        {
            var onAdd = new GameCollector();
            InternalOnAdd(onAdd);
            return onAdd;
        }
    }
	
	public GameCollector OnRemove
    {
        get
        {
            var onRemove = new GameCollector();
            InternalOnRemove(onRemove);
            return onRemove;
        }
    }
	
	public GameCollector OnDestroy
    {
        get
        {
            var onDestroy = new GameCollector();
            InternalOnDestroy(onDestroy);
            return onDestroy;
        }
    }
	
	public GameWithBuilder With
    {
        get { return withBuilder as GameWithBuilder; }
    }

    public GameWithoutBuilder Without
    {
        get { return withoutBuilder as GameWithoutBuilder; }
    }

    public GameAnyofBuilder AnyOf
    {
        get { return anyofBuilder as GameAnyofBuilder; }
    }
}

public partial class GameCollector : Collector<GameEntity>
{
}

public static class GameComponentsMap
{
	public const int Color = 0;
    public const int Message = 1;
    public const int Name = 2;
    public const int Position = 3;
    public const int Reference = 4;
    public const int References = 5;
    public const int Speed = 6;
    public const int BusinessId = 7;
    public const int Settings = 8;

	public static readonly string[] Names =
	{
		"Color",
        "Message",
        "Name",
        "Position",
        "Reference",
        "References",
        "Speed",
        "BusinessId",
        "Settings"
	};
	
	public static readonly System.Type[] Types = 
	{
		typeof(ColorComponent),
        typeof(MessageComponent),
        typeof(NameComponent),
        typeof(PositionComponent),
        typeof(ReferenceComponent),
        typeof(ReferencesComponent),
        typeof(SpeedComponent),
        typeof(BusinessIdComponent),
        typeof(SettingsComponent)
	};
}
public partial class Contexts 
{
	public GameContext Game = new GameContext(GameComponentsMap.Types);
}

public static class GameContextExtensions 
{
	public static GameEntity ToGameEntity(this int id, Contexts contexts) 
	{
		return contexts.Game.GetEntity(id);
	}
}
public partial class GameContext : Context<GameEntity>
{
	
	
	public GameGroup GetGroup()
    {
		return (GameGroup)CreateGroupInternal(new GameGroup());
    }
	
	public GameContext(System.Type[] componentTypes) : base(componentTypes)
    {
    }
}
public partial class GameEntity : Entity
{
}
namespace NanoEcs 
{
	public class Game : System.Attribute 
	{
	}
}